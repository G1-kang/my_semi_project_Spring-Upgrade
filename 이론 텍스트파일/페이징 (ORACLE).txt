@ 페이징(ORACLE)

# DB에서 제공하는 기능
	1. 페이징 대상인 테이블 로우의 총 개수를 알아야한다. 
		- 오라클에서는 count(*)기능을 지원한다
		>>> SELECT COUNT(*) FROM TABLE_NAME;

	2. 해당 페이지의 속하는 게시물만 가지고 와야 한다.
		- 오라클에서는 ROWNUM(ROW_NUMBER())을 제공한다.
	  	(ROWNUM은 출력되는 정보에 가상으로 순차적인 번호를 부여하여 페이지에 게시물에 접근이 가능하다.)


@ ORACLE에서 NUMBER을 이용한 페이징 쿼리

-- # 용어 정리 
-- 서브쿼리 : WHERE 절/FROM 절/SELECT 절 안에 들어가는 쿼리를 통칭하여 서브쿼리라고 한다.
-- 중첩서브쿼리 : WHERE절 서브쿼리	- 특징 > ORDER BY를 사용하지 못한다.
-- 인라인뷰 : FROM절 서브쿼리		- 특징 > 뷰(VIEW)처럼 하나의 가상테이블이다.
-- 스칼라서브쿼리 : SELECT절 서브쿼리 - 특징 > 반드시 단일 값을 리턴하는 쿼리를 사용한다. 주로 SUM, COUNT, MIN, MAX 등과 같은 집계 함수와 사용한다.

-- ROWNUM은 오라클에서 제공하는 Top-N 쿼리 프로세싱 기능이다 : 쿼리문의 로우 데이터가 출력될때  결과에 순서내로 숫자를 매겨서 나오게 한다.    
 

-- # ROWNUM의 동작 원리
-- ROWNUM은 쿼리 내에서 사용 가능한 (실제 컬럼이 아닌) 가상 컬럼(pseudocolumn)입니다. 
-- ROWNUM에는 숫자 1, 2, 3, 4, ... N의 값이 할당됩니다. 여기서 N 은 ROWNUM과 함께 사용하는 로우의 수를 의미합니다. 
-- ROWNUM의 값은 로우에 영구적으로 할당되지 않습니다(이는 사람들이 많이 오해하는 부분이기도 합니다). 테이블의 로우는 숫자와 연계되어 참조될 수 없습니다. 
-- 따라서 테이블에서 "row 5"를 요청할 수 있는 방법은 없습니다. "row 5"라는 것은 존재하지 않기 때문입니다.
-- 또 ROWNUM 값이 실제로 할당되는 방법에 대해서도 많은 사람들이 오해를 하고 있습니다. 
-- ROWNUM 값은 쿼리의 조건절이 처리되고 난 이후, 그리고 sort, aggregation이 수행되기 이전에 할당됩니다.

-- # 실행 순서
--1. FROM/WHERE 절이 먼저 처리됩니다.
--2. ROWNUM이 할당되고 FROM/WHERE 절에서 전달되는 각각의 출력 로우에 대해 증가(increment) 됩니다.
--3. SELECT가 적용됩니다.
--4. GROUP BY 조건이 적용됩니다.
--5. HAVING이 적용됩니다.
--6. ORDER BY 조건이 적용됩니다.

--출처: https://5dol.tistory.com/127 [5dol Story]



-- ROWNUM 연습1 -- 단순출력(잘못된 사용이다.)
SELECT ROWNUM as RN, BOARD_NO, ID, BOARD_NAME, BOARD_TITLE, BOARD_REGDATE, BOARD_LIKE 
FROM FREE_BOARD


-- ROWNUM 연습2 -- 인라인뷰 없이 ROWNUM + ORDER BY와 함께 사용		>> 잘못된 방법을 알기 위한 예시

-- 2-1) 잘못된사용
SELECT ROWNUM as RN, BOARD_NO, ID, BOARD_NAME, BOARD_TITLE, BOARD_REGDATE, BOARD_LIKE 
FROM FREE_BOARD
ORDER BY BOARD_NO DESC;		

-- 결과 : 2-1)의 쿼리를 실행하면 아무문제 없이 출력이된다.
-- 왜 일까?	BOARD_NO는 시퀀스이다 시퀀스는 생성하는 순서대로 작성이된다. 
--			그렇기 때문에 BOARD_NO를 오름차순 하든 내림차순 하든 아무런 문제 없이 정렬된 값에 넘버가 붙는다.
--			이러한 쿼리는 잘못 사용하고 있지만, 결과는 의도한 대로 나오는 것처럼 보여 잘못을 인지하기 힘들게 한다.

-- 2-2) 잘못된 사용 예시 : 시퀀스가 아닌 BOARD_LIKE를 기준으로 정렬 
SELECT ROWNUM as RN, BOARD_NO, ID, BOARD_NAME, BOARD_TITLE, BOARD_REGDATE, BOARD_LIKE 
FROM FREE_BOARD
ORDER BY BOARD_LIKE DESC;	

-- 결과 : 2-2)의 쿼리를 출력하면 의도 하지 않는 결과를 출력한다. ROUNUM에 의해 넘버링이 먼저 되고 그 후 BOARD_LIKE를 기준으로 내림차순 정렬된 결과가 나오게 된다.

-- 왜 일까?	결론은 실행되는 순서 때문이다. ROUNUM에 의해 넘버링이 먼저 되며, 그후에 정렬(ORDER BY)연산이 실행된다. 
--			그렇기 때문에 최종적으로    RN의 순서는 BOARD_LIKE를 기준으로 뒤죽박죽 출력이 된다.



-- ROWNUM 연습3 -- 인라인뷰 + ROWNUM + ORDER BY 함께 사용		>> 정확한 사용법을 알기 위한 예시
SELECT ROWNUM AS RN, A.BOARD_NO, A.BOARD_NAME, A.BOARD_TITLE, A.BOARD_REGDATE, A.BOARD_LIKE
FROM (
	SELECT BOARD_NO, BOARD_NAME, BOARD_TITLE, BOARD_REGDATE, BOARD_LIKE
	FROM FREE_BOARD
	ORDER BY BOARD_LIKE DESC) A

-- 결과 : 정상적으로 의도한 결과를 출력한다. BOARD_LIKE를 기준으로 내림차순 정렬이 되고, 그 후 넘버링이 붙은 결과를 출력한다.
-- 왜 일까?	위에 연습2에서 설명을 했듯이 문제는 쿼리의 실행 순서이다. 
--			핵심순서는 '정렬을 먼저하고 넘버링을 붙여라'이다. 
--			이를 위해서 서브쿼리(인라인뷰, 가상테이블)을 사용하여 정렬한 테이블을 먼저 만들고, 해당 결과에 ROWNUM을 사용하여 넘버링을 한다.
	
	
	
-- ROWNUM 연습4 -- 가상테이블 + ROWNUM + ORDER BY를 사용한 결과에서 ROWNUM넘버 5 ~ 10을 가져오자		>>> TOP N 쿼리 사용 예시(페이징)	

-- 4-1) > 결과가 나오지 않는 잘못된 사용
SELECT ROWNUM AS RN, A.BOARD_NO, A.BOARD_NAME, A.BOARD_TITLE, A.BOARD_REGDATE, A.BOARD_LIKE
FROM (
	SELECT BOARD_NO, BOARD_NAME, BOARD_TITLE, BOARD_REGDATE, BOARD_LIKE
	FROM FREE_BOARD
	ORDER BY BOARD_LIKE DESC) A
WHERE ROWNUM BETWEEN 5 AND 10; 	-- 또는   WHERE RN BETWEEN 5 AND 10;

-- 결과 : WHERE에 ROWNUM을 사용하면 아무것도 나오지 않는다. / WHERE에 RN이라는 이름으로 사용하면 invalid identifier(잘못된 식별자) 에러를 발생한다. 
-- 왜 일까? 	1. 먼저 알아야 할 것은 WHERE의 'ROWNUM'과 SELECT의 'ROWNUM AS RN'은 다른 ROWNUM이다. 
-- 			2. WHERE ROWNUM의 기능은 1 ~ N개의 데이터를 가져오기 위해 사용된다.(상위 N 개의 로우만을 가져오도록 명령) 그렇기 때문에 범위를 지정하면 아무런 결과를 내보내지 않는다.
--			3. SELECT의 ROWNUM AS RN은 현재 가상테이블이기 때문에 위처럼 사용시에 조건에 참조하여 사용할 수 없기 때문에 잘못된 식별자 에러가 발생한다.
	
	
-- 4-2) SELECT의 'ROWNUM AS RN'를 참조하기 위해 인라인뷰(X)를 추가로 사용하여  5~10 범위의 데이터를 가져오자.	
SELECT X.RN, X.BOARD_NO, X.BOARD_NAME, X.BOARD_TITLE, X.BOARD_REGDATE, X.BOARD_LIKE
FROM (
	SELECT ROWNUM AS RN, A.BOARD_NO, A.BOARD_NAME, A.BOARD_TITLE, A.BOARD_REGDATE, A.BOARD_LIKE
	FROM (
		SELECT BOARD_NO, BOARD_NAME, BOARD_TITLE, BOARD_REGDATE, BOARD_LIKE
		FROM FREE_BOARD
		ORDER BY BOARD_LIKE DESC) A
	)X	
WHERE X.RN BETWEEN 5 AND 10;

-- 결과 : 정상적으로 TOP N 쿼리를 내보낸다. 
--		1. BOARD_LIKE를 기준으로 정렬한다.
-- 		2. 정렬된 데이터에 넘버링을 한다.
--	 	3. 넘버링된 데이터에서 5 ~ 10번째의 데이터를 가지고 온다. 
-- 왜 일까 :	4-1)의 결과와 다르게 정상 작동되는 이유는 SELECT의 'ROWNUM AS RN'을 참조하여 사용할 수 있게 됬기 때문이다.
--			인라인뷰 A는 BOARD_LIKE를 기준으로 정렬이 되어있다. 거기에 ROWNUM(RN)으로 넘버링을 하였다.
--			여기까지는 A테이블과 RN이 각각 따로이다 그렇기 때문에 RN을 참조할 수 가 없다.(?)
-- 			그렇기 때문에  추가 인라인뷰 X를 사용하여 A테이블과 RN을 하나의 가상테이블로 합친것이다.
--			결과적으로 A테이블과 RN은 X테이블이라는 하나의 테이블이 되고 마지막 WHERE문에서 사용된 것처럼
--			X.RN이라는 이름으로 참조되어 5 ~ 10 범위의 데이터를 가져온다 



-- 4-2) [SELECT의 ROWNUM]과 [WHERE의 ROWNUM]을 사용한 효율적인 TOP N 쿼리 최종 코드
SELECT X.RN, X.BOARD_NO, X.BOARD_NAME, X.BOARD_TITLE, X.BOARD_REGDATE, X.BOARD_LIKE
FROM (
	SELECT ROWNUM AS RN, A.BOARD_NO, A.BOARD_NAME, A.BOARD_TITLE, A.BOARD_REGDATE, A.BOARD_LIKE
	FROM (
		SELECT BOARD_NO, BOARD_NAME, BOARD_TITLE, BOARD_REGDATE, BOARD_LIKE
		FROM FREE_BOARD
		ORDER BY BOARD_LIKE DESC) A
	WHERE ROWNUM <= 10	
	)X	
WHERE X.RN >= 5

-- 결과 : 위의 4-2)와 같은 정상적으로 TOP N 쿼리를 내보낸다. 
-- 왜 효율적일까?
--		4-2)와 4-2)의 쿼리는 데이터가 적다면 차이가 없다. 하지만 데이터가 많아지면 많아질수록 큰 성능 차이를 보여준다. 
-- 		먼저 두 쿼리는 공통적으로 먼저 BOARD_LIKE를 기준으로 정렬을 수행한다. 그 후 넘버링을 하고 필요한 범위를 가져온다
--		여기서 생각해 볼것이 있다. 로우가 10만개 이상이라고 가정할 때 사용자가 요청하는 데이터는 정렬된 상위데이터 중 5 ~ 10 뿐이다.
--		즉, 상위 10개의 데이터를 가져오자고 10만개의 데이터를 전부 정렬하고 번호를 일일이 붙이는 것은 너무 비효율적일 것이다   	

--		그렇기 때문에 오라클DB에서는 이러한 Top-N 프로세싱을 위해 WHERE문에서 사용하는 ROWNUM을 만들었다.
-- 		사용자가 인라인뷰에 정렬을 한 테이블을 적용한 후 'WHERE ROWNUM < N'이란 조건문을 사용한 쿼리를 요청하면 
--		DB에서는 내부적으로 모든 정렬을 수행하지 않고 사용자가 요청한 N개의 데이터까지 정렬을 수행 후 순서대로 내보낸다.
--		즉, ROWNUM을 사용하고 안하고의 차이는 '모든 데이터의 정렬을 수행하는가?', '요청한 필요한 데이터만 정렬을 수행하는가?'라는 아주아주 큰 성능차이를 발생 시킨다.

--	   	'WHERE ROWNUM < N' 주의점
--		1. 상위 N개의 데이터를 요청하기 위해 사용되기 때문에 범위를 지정하여 쿼리를 요청할 수 없다(값이 안나옴)
-- 		2. WHERE문 조건절은 ORDER BY보다 빨리 수행되기 때문에 무조건! 인라인뷰로 정렬을 먼저수행한 가상테이블의 조건절에 사용한다.  
--		EX)
--			SELECT * 
--			FROM
--				(SELECT * FROM 테이블명		-- 주의점 2.
--				ORDER BY 컬럼) 
--			WHERE ROWNUM <= N;			-- 주의점 1.

-- 참고 출처: https://5dol.tistory.com/127 [5dol Story]



# 페이징 쿼리에 사용할 시작게시물 번호(startCount)  끝게시물 번호(endCount)를 구하는 법
=====================================================================================================================================
1	int totalCount = 25;
2	int countPage = 10;
3	int page = 3;
4
5	int startCount = (page - 1) * countPage + 1;  	// 21
6	int endCount = page * countPage;  		// 30
7 	// 마이바티스 메퍼의 쿼리에 startCount , endCount를 보내어 실행
=====================================================================================================================================

# 마이바티스에 사용할 쿼리문
SELECT X.RN, X.BOARD_NO, X.BOARD_NAME, X.BOARD_TITLE, X.BOARD_REGDATE, X.BOARD_LIKE
FROM (
	SELECT ROWNUM AS RN, A.BOARD_NO, A.BOARD_NAME, A.BOARD_TITLE, A.BOARD_REGDATE, A.BOARD_LIKE
	FROM (
		SELECT BOARD_NO, BOARD_NAME, BOARD_TITLE, BOARD_REGDATE, BOARD_LIKE
		FROM FREE_BOARD
		ORDER BY BOARD_LIKE DESC) A
	WHERE ROWNUM <= #{endCount }	
	)X	
WHERE X.RN >= #{startCount }









++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++자바 코드에서 사용법 ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

@ 페이징 코드 로직
	
# 총 페이지 수(totalPage) 구하기

1. A상황 
	a. 한 페이지에 출력될 게시물 수(== countList)	: 10개의 게시물
	b. 한 화면에 출력될 페이지 수(== countPage)	: 10페이지 
	c. 현재 페이지 번호(== page)		: 시작페이지는1
	d. 총 페이지 수(== totalPage)		: ?
	e. 총 게시물 수(== totalCount)		: 25		

	1). 총 페이지 수(== totalPage) 계산하기
	>> count(*) 함수를 사용하여 총 게시물을 구하기	: 25개
	>> 총 게시물 / countList = totalPage	: 25 / 10 = 몫2 나머지5	>>> 3 페이지
	

2. B 상황	
	a. 한 페이지에 출력될 게시물 수(== countList)	: 5개의 게시물
	b. 한 화면에 출력될 페이지 수(== countPage)	: 10페이지 
	c. 현재 페이지 번호(== page)		: 시작페이지는1
	d. 총 페이지 수(== totalPage)		: ?
	e. 총 게시물 수(== totalCount)		: 25		
	
	1). 총 페이지 수(== totalPage) 계산하기
	>> count(*) 함수를 사용하여 총 게시물을 구하기	: 25개
	>> 총 게시물 / countList = totalPage	: 25 / 5 = 몫5 나머지0 >>> 5페이지

	*A와 B의 결과를 보면 필요한 totalPage는 A경우 3페이지, B의 경우 5페이지 입니다.
	위의 내용을 코드화 할때 JAVA에서 주의해야할 점이 있습니다.
	java에서 A상황인 25/10의 연산을 하는 경우 결과는 int형 2로 나오게 됩니다. 
	또한 B상황인 25/5의 연산의 결과는 int형 5로 나오게 됩니다.
	즉 나머지가 있는 결과에서는 +1의 연산을 추가로 해줘야 하고
	나누어 떨어질때에는 결과를 그대로 사용해야 정확한 totalPage를 구할 수 있습니다.

- java에서 totalPage 구하는 코드
========================================================================
1	int totalCount = 25;		// 실제로는 DB에서 구해온 값이 들어가야한다.
2	int countList = 10;
3	totalPage = totalCount / countList;
4	if(totalCount % countList  > 0) {
5	     totalPage++;		// 나머지가 있을경우 +1
6	}
========================================================================


- (추가) totalPage를 사용하여 현재 페이지 보정처리 : 
	현재 페이지(page)가 총 페이지( totalPage)를 넘어가는 경우 마지막 페이지로 강제치환 시킨다. 
========================================================================
1	int page = 2;		// 실제로는 view에서 받아오는 값이다.
2	int totalCount = 25;		// 실제로는 DB에서 구해온 값이 들어가야한다.
3	int countList = 10;
4	totalPage = totalCount / countList;
5	if(totalCount % countList  > 0) {
6	    totalPage++;		// 나머지가 있을경우 +1
7	}
8	
9	if(totalPage < page){
10	    page = totalpage;		// 현재 페이지가 총페이지를 넘어가지 않게 치환한다.
11	}
========================================================================


# 하단에 표시될 페이지 번호를 구하기(한번에 10페이지 단위로 보여주는 경우)
	
1. A상황
	a. 한 페이지에 출력될 게시물 수(== countList)	: 10개의 게시물
	b. 한 화면에 출력될 페이지 수(== countPage)	: 10페이지 
	c. 현재 페이지 번호(== page)		: 5
	d. 총 페이지 수(== totalPage)		: 255 / 10 = 25...5 >>> 26페이지
	e. 총 게시물 수(== totalCount)		: 255	
	
	1) 현재페이지의 시작 페이지(startPage) 구하기
	((page) - 1) / countPage) * countPage +1		= startPage
	>>> ((5 - 1) / 10) * 10 +1			= 1
	
	// (int)4 / (int)10 == 0	 
	>>> (0 / 10) * 10 +1
	>>> 0 + 1
	>>> 1
	
	2) 현재페이지의 마지막 페이지(endPage) 구하기
	startPage + countPage - 1			= endPage
	>>> 0 + 10 - 1				= 10

2. B상황
	a. 한 페이지에 출력될 게시물 수(== countList)	: 10개의 게시물
	b. 한 화면에 출력될 페이지 수(== countPage)	: 10페이지 
	c. 현재 페이지 번호(== page)		: 22
	d. 총 페이지 수(== totalPage)		: 255 / 10 = 25...5 >>> 26페이지
	e. 총 게시물 수(== totalCount)		: 225	
	
	
	1) 현재페이지의 시작 페이지(startPage) 구하기
	((page) - 1) / countPage) * countPage +1		= startPage
	>>> ((22 - 1) / 10) * 10 +1			= 21
	
	// (int)22 / (int)10 == 2
	>>> 2 * 10 +1
	>>> 20 + 1
	>>> 21
	
	2) 현재페이지의 마지막 페이지(endPage) 구하기
	startPage + countPage - 1			= endPage
	>>> 21 + 10 - 1  				= 30 

	*여기서 중요한 점은 totalPage는 26이기 때문에 endPage가 30이 나오면 안된다.
	그렇기 때문에 endPage가 totalPage를 초과한다면 endPage를 보정한다.
	if(endPage > totalPage) {
		endPage = totalPage;		= 26 >> 최종 보정 endPage
	}

 - java에서 startPage와 endPage구하는 코드	
========================================================================
1	int page = 22;
2	int countList = 10;
3	int countPage = 10;
4	int totalCount = 255;
5	int totalPage = totalCount / countList;
6	
7	if (totalCount % countList > 0) {		// 나머지가 있을 경우  총 페이지 수를 +1합니다.
8	    totalPage++;	
9	}
10	
11	if (totalPage < page) {		// 현재페이지가 총 페이지보다 클경우 보정
12	    page = totalPage;
13	}
14	
15	// 여기서부터 추가된 코드 
16	int startPage = ((page - 1) / 10) * 10 + 1;
17	int endPage = startPage + countPage - 1;
18
19	//  마지막 페이지가 총 페이지를 넘을경우 보정해줍니다.
20	if (endPage > totalPage) {
21	    endPage = totalPage;
22	}

	* 출력으로 보는 완성된 페이징 예시
	* 첫페이지 이동, 이전 페이지, 다음페이지, 끝페이지 이동 버튼 추가 
23	if (startPage > 1) {
24	    System.out.print("<a href=\"?page=1\">처음</a>");
25	}
26
27	if (page > 1) {
28	    System.out.print("<a href=\"?page=" + (page - 1)  + "\">이전</a> \t");
29	}
30	
	// 페이징 출력
31	for (int iCount = startPage; iCount <= endPage; iCount++) {
32	      if (iCount == page) {
33	          System.out.print(" <b>" + iCount + "</b>");
34	      } else {
35                        System.out.print(" " + iCount + " ");
36	      }
37	}
38
39	if (page < totalPage) {
40	    System.out.println("\t <a href=\"?page=" + (page + 1)  + "\">다음</a>");
41	}
42
43	if (endPage < totalPage) {
44	    System.out.print("<a href=\"?page=" + totalPage + "\">끝</a>");
45	}
	
	
========================================================================


